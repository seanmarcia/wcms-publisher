/ scss:
/   ul.changes:not(.expanded) > li:nth-child(n+3) { display: none; }

- if !policy(obj).edit?
  .alert.alert-warning You do not have permission to access this tab
- else
  .change_history
    .table-responsive style="overflow: scroll;"
      table.table.table-striped
        thead
        tr
          th
          th Action
          th User
          th Email
          th Created
          th Changes

        tbody
          - logs(obj).each do |change|
            - if change.class == Change
              tr
                td = link_to fa_icon('undo'), [:undo, obj, change], data: { confirm: "Are you sure that you want to undo this change?" }

                td = change.action.try(:humanize)
                td = change.modifier.try(:to_s)
                td = change.modifier.try(:email)
                td = change.created_at.to_s(:long_ordinal)
                td

                  ul.changes
                    - (change.tracked_edits[:add]||[]).each do |k,v|
                      li.remove = "Added field #{k} value #{v}"

                    - (change.tracked_edits[:modify]||[]).each do |k,v|
                      li.modify = "Changed field #{k} from #{v[:from]} to #{v[:to]}"

                    - (change.tracked_edits[:array]||[]).each do |k,v|
                      li.modify
                        - if v[:remove].nil?
                          = "Changed field #{k} by adding #{v[:add]}"
                        - elsif v[:add].nil?
                          = "Changed field #{k} by removing #{v[:remove]}"
                        - else
                          = "Changed field #{k} by adding #{v[:add]} and removing #{v[:remove]}"

                    - (change.tracked_edits[:remove]||[]).each do |k,v|
                      li.remove = "Removed field #{k} (was previously #{v})"
                    a.show_more_changes hidden="true" href="#" Expand

            / / For the time being this will remain commented out until we figure out what we want to do with it
              / - elsif change.class == ActivityLog
              /   tr
              /   / Modal Window
              /   .modal.fade tabindex="-1" role="dialog" aria-labelledby="activityLog" aria-hidden="true" id="activity-log-edit-#{change.id.to_s}"
              /     .modal-dialog
              /       .modal-content
              /   td.activity_log
              /     .dropdown
              /       .dropdown-toggle id="dropdownMenu1" data-toggle="dropdown"
              /         = link_to fa_icon('cog')
              /       ul.dropdown-menu role="menu" aria-labelledby="dropdownMenu1"
              /         li
              /           a href=url_for([:edit, obj, change]) data-toggle="modal" data-target="#activity-log-edit-#{change.id.to_s}" Edit Action
              /   td = change.action_performed.try(:humanize)
              /   td = change.acting_user
              /   td = change.acting_user_email
              /   td = change.created_at.to_s(:long_ordinal)
              /   / td
              /   /   -if change.reviewer_ids.present?
              /   /     = change.reviewer_ids.each{|id| Person.find(id).name }.join(', ')
              /   td
              /     - if change.message.present?
              /       => change.message.try(:humanize)
              /       - if change.snapshot.present? && change.changes_made.present?
              /         | &ndash;
              /         em = change.changes_made.collect{|c| c.truncate(300) }.join(' ')
              /     - elsif change.snapshot.present? && change.changes_made.present?
              /       span.changes = change.changes_made.collect{|c| c.truncate(300) }.join(' ')
